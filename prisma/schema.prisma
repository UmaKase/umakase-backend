generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// SECTION Users
// MODEL User
model User {
  id           String   @id @default(uuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
  email        String?  @unique
  password     String
  refreshToken String?  @db.Text
  profile      Profile?
  tmpId        String?  @unique
}

// MODEL Profile
model Profile {
  id          String            @id @default(uuid())
  username    String            @unique
  firstname   String?
  lastname    String?
  user        User              @relation(fields: [userId], references: [id])
  userId      String            @unique
  room        ProfilesOnRooms[]
  createdRoom Room[]
}

// !SECTION

// SECTION Foods
// MODEL Food
model Food {
  id        String         @id @default(uuid())
  createdAt DateTime       @default(now())
  updatedAt DateTime       @default(now()) @updatedAt
  name      String?
  altName   String?
  country   String?
  img       String?
  tags      TagsOnFoods[]
  room      FoodsOnRooms[]
}

// MODEL Tag
model Tag {
  id        String        @id @default(uuid())
  createdAt DateTime      @default(now())
  updatedAt DateTime      @default(now()) @updatedAt
  name      String
  food      TagsOnFoods[]
}

// RELATION TagsOnFood || Many - Many
model TagsOnFoods {
  tagId  String
  foodId String
  food   Food   @relation(fields: [foodId], references: [id])
  tag    Tag    @relation(fields: [tagId], references: [id])

  // @@index([foodId], map: "TagsOnFoods_foodId_fkey")
  @@id([tagId, foodId])
}

// !SECTION

// SECTION Room
// MODEL Room
model Room {
  id        String            @id @default(uuid())
  name      String
  createdAt DateTime          @default(now())
  updatedAt DateTime          @default(now()) @updatedAt
  user      ProfilesOnRooms[]
  foods     FoodsOnRooms[]
  creator   Profile           @relation(fields: [creatorId], references: [id])
  creatorId String
}

// RELATION Foods On Room || Many - Many
model FoodsOnRooms {
  roomId   String
  foodId   String
  room     Room     @relation(fields: [roomId], references: [id])
  food     Food     @relation(fields: [foodId], references: [id])
  joinedAt DateTime @default(now())

  @@id([roomId, foodId])
  @@index([foodId], map: "FoodsOnRooms_foodId_fkey")
}

// RELATION User On Room || Many - Many
model ProfilesOnRooms {
  roomId    String
  profileId String
  room      Room     @relation(fields: [roomId], references: [id])
  profile   Profile  @relation(fields: [profileId], references: [id])
  joinedAt  DateTime @default(now())

  @@id([roomId, profileId])
  @@index([profileId], map: "ProfilesOnRooms_profileId_fkey")
}

// !SECTION
